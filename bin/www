#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("readaloud:server");
var http = require("http");
const WebSocket = require("ws");
const realtimeTranscriptionService = require("../services/realtimeTranscription");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Initialize a WebSocket server with the HTTP server.
 */
const wss = new WebSocket.Server({ server });

/**
 * WebSocket connection handling.
 */
wss.on("connection", (ws) => {
  console.log("WebSocket client connected.");
  realtimeTranscriptionService.startTranscription(ws);

  ws.on("message", (message) => {
    console.log("Message received from client.");
    realtimeTranscriptionService.sendAudioDataForTranscription(message);
  });

  ws.on("close", () => {
    console.log("WebSocket client disconnected.");
    realtimeTranscriptionService.stopTranscription();
  });
});
/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

// Normalize a port into a number, string, or false.
function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) return val; // named pipe
  if (port >= 0) return port; // port number
  return false;
}

// Event listener for HTTP server "error" event.
function onError(error) {
  if (error.syscall !== "listen") throw error;

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// Event listener for HTTP server "listening" event.
function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
